//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApp1.TicketService {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketService.ITicketService")]
    public interface ITicketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetYourString", ReplyAction="http://tempuri.org/ITicketService/GetYourStringResponse")]
        string GetYourString(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetYourString", ReplyAction="http://tempuri.org/ITicketService/GetYourStringResponse")]
        System.Threading.Tasks.Task<string> GetYourStringAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAll", ReplyAction="http://tempuri.org/ITicketService/GetAllResponse")]
        DAL.Models.Ticket[] GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAll", ReplyAction="http://tempuri.org/ITicketService/GetAllResponse")]
        System.Threading.Tasks.Task<DAL.Models.Ticket[]> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Create", ReplyAction="http://tempuri.org/ITicketService/CreateResponse")]
        int Create(DAL.Models.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Create", ReplyAction="http://tempuri.org/ITicketService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(DAL.Models.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Delete", ReplyAction="http://tempuri.org/ITicketService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Delete", ReplyAction="http://tempuri.org/ITicketService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Update", ReplyAction="http://tempuri.org/ITicketService/UpdateResponse")]
        void Update(DAL.Models.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Update", ReplyAction="http://tempuri.org/ITicketService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(DAL.Models.Ticket ticket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketServiceChannel : ConsoleApp1.TicketService.ITicketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketServiceClient : System.ServiceModel.ClientBase<ConsoleApp1.TicketService.ITicketService>, ConsoleApp1.TicketService.ITicketService {
        
        public TicketServiceClient() {
        }
        
        public TicketServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetYourString(string str) {
            return base.Channel.GetYourString(str);
        }
        
        public System.Threading.Tasks.Task<string> GetYourStringAsync(string str) {
            return base.Channel.GetYourStringAsync(str);
        }
        
        public DAL.Models.Ticket[] GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<DAL.Models.Ticket[]> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Create(DAL.Models.Ticket ticket) {
            return base.Channel.Create(ticket);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(DAL.Models.Ticket ticket) {
            return base.Channel.CreateAsync(ticket);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void Update(DAL.Models.Ticket ticket) {
            base.Channel.Update(ticket);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(DAL.Models.Ticket ticket) {
            return base.Channel.UpdateAsync(ticket);
        }
    }
}
