//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleClient.TicketService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Ticket", Namespace="http://schemas.datacontract.org/2004/07/DAL.Models")]
    [System.SerializableAttribute()]
    public partial class Ticket : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EventNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private decimal PriceField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EventName {
            get {
                return this.EventNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EventNameField, value) != true)) {
                    this.EventNameField = value;
                    this.RaisePropertyChanged("EventName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal Price {
            get {
                return this.PriceField;
            }
            set {
                if ((this.PriceField.Equals(value) != true)) {
                    this.PriceField = value;
                    this.RaisePropertyChanged("Price");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="TicketService.ITicketService")]
    public interface ITicketService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetYourString", ReplyAction="http://tempuri.org/ITicketService/GetYourStringResponse")]
        string GetYourString(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetYourString", ReplyAction="http://tempuri.org/ITicketService/GetYourStringResponse")]
        System.Threading.Tasks.Task<string> GetYourStringAsync(string str);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAll", ReplyAction="http://tempuri.org/ITicketService/GetAllResponse")]
        System.Collections.Generic.List<ConsoleClient.TicketService.Ticket> GetAll();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/GetAll", ReplyAction="http://tempuri.org/ITicketService/GetAllResponse")]
        System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.TicketService.Ticket>> GetAllAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Create", ReplyAction="http://tempuri.org/ITicketService/CreateResponse")]
        int Create(ConsoleClient.TicketService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Create", ReplyAction="http://tempuri.org/ITicketService/CreateResponse")]
        System.Threading.Tasks.Task<int> CreateAsync(ConsoleClient.TicketService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Delete", ReplyAction="http://tempuri.org/ITicketService/DeleteResponse")]
        void Delete(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Delete", ReplyAction="http://tempuri.org/ITicketService/DeleteResponse")]
        System.Threading.Tasks.Task DeleteAsync(int id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Update", ReplyAction="http://tempuri.org/ITicketService/UpdateResponse")]
        void Update(ConsoleClient.TicketService.Ticket ticket);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITicketService/Update", ReplyAction="http://tempuri.org/ITicketService/UpdateResponse")]
        System.Threading.Tasks.Task UpdateAsync(ConsoleClient.TicketService.Ticket ticket);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITicketServiceChannel : ConsoleClient.TicketService.ITicketService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TicketServiceClient : System.ServiceModel.ClientBase<ConsoleClient.TicketService.ITicketService>, ConsoleClient.TicketService.ITicketService {
        
        public TicketServiceClient() {
        }
        
        public TicketServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public TicketServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string GetYourString(string str) {
            return base.Channel.GetYourString(str);
        }
        
        public System.Threading.Tasks.Task<string> GetYourStringAsync(string str) {
            return base.Channel.GetYourStringAsync(str);
        }
        
        public System.Collections.Generic.List<ConsoleClient.TicketService.Ticket> GetAll() {
            return base.Channel.GetAll();
        }
        
        public System.Threading.Tasks.Task<System.Collections.Generic.List<ConsoleClient.TicketService.Ticket>> GetAllAsync() {
            return base.Channel.GetAllAsync();
        }
        
        public int Create(ConsoleClient.TicketService.Ticket ticket) {
            return base.Channel.Create(ticket);
        }
        
        public System.Threading.Tasks.Task<int> CreateAsync(ConsoleClient.TicketService.Ticket ticket) {
            return base.Channel.CreateAsync(ticket);
        }
        
        public void Delete(int id) {
            base.Channel.Delete(id);
        }
        
        public System.Threading.Tasks.Task DeleteAsync(int id) {
            return base.Channel.DeleteAsync(id);
        }
        
        public void Update(ConsoleClient.TicketService.Ticket ticket) {
            base.Channel.Update(ticket);
        }
        
        public System.Threading.Tasks.Task UpdateAsync(ConsoleClient.TicketService.Ticket ticket) {
            return base.Channel.UpdateAsync(ticket);
        }
    }
}
